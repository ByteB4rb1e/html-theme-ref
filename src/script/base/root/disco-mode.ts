import { ColorScheme, PreferredColorScheme } from './preferred-color-scheme';
import * as pixabay from '../../vendors/pixabay';

/**
 * Tests if the browser allows audio autoplay by attempting to play
 * a muted audio file.
 *
 * @returns A promise resolving to `true` if autoplay is allowed, otherwise
 *          `false`.
 */
async function canPlayAudio() {
    // TODO: fix waveform issue, should be a single sample at a very low bitrate
    // and an amplitude of 0.
    const audio = new Audio(
        'data:audio/x-wav;base64,UklGRooWAABXQVZFZm10IBAAAAABAAEAIlYAAESs
    );
    audio.muted = true;

    try {
        await audio.play();
        console.log('audio autoplay is allowed');
        return true;
    } catch (error) {
        console.warn('audio autoplay is blocked:', error);
        return false;
    }
}

/**
 * Waits for the audio element to be ready and begin playback.
 *
 * @param audio - The HTMLAudioElement to monitor.
 * @returns A promise that resolves when the audio is ready to play.
*/
function waitForAudioToStart(audio: HTMLAudioElement): Promise<void> {
    return new Promise((resolve, reject) => {
        const onReady = () => {
            resolve();
            audio.removeEventListener('canplay', onReady);
            audio.removeEventListener('error', onError);
        };

        const onError = (event: Event) => {
            reject(new Error('Failed to load audio: ' + event));
            audio.removeEventListener('canplay', onReady);
            audio.removeEventListener('error', onError);
        };

        audio.addEventListener('canplay', onReady);
        audio.addEventListener('error', onError);
    });
}

/**
 * Represents Disco Mode, an interactive feature that transforms the website
 * into a dance party with flashing colors and music.
 */
export class DiscoMode {
    private body: HTMLElement;
    private preferredColorScheme: PreferredColorScheme;
    private audio: HTMLAudioElement | null = null;
    private discoTrack: Promise<string>;
    private colorToggleIntervalId: number | null = null;

    /**
     * Creates an instance of DiscoMode.
     *
     * @param html - The root HTML element of the document.
     * @param preferredColorScheme - A utility for managing the site's color scheme.
     * @throws Will throw an error if the `<body>` element is not found in the provided HTML.
     */
    constructor(
        html: HTMLElement,
        preferredColorScheme: PreferredColorScheme
    ) {
        var body = html.getElementsByTagName('body')[0];

        if (body === undefined) {
            throw new Error('unable to get body from html element.');
        }

        console.log('disco-mode: booking the site...');
        this.body = body;

        console.log('disco-mode: booking the LJ...');
        this.preferredColorScheme = preferredColorScheme;

        console.log('disco-mode: booking the DJ...');
        this.discoTrack = pixabay.audio.germanTechnoCowboy();
    }

    /**
     * Enables Disco Mode, turning the website into a party with music and visual effects.
     *
     * @param seizureWarningAcknowledgment - A string acknowledging the seizure risk warning. Must match 'IKNOWITSFLASHY'.
     * @throws Will throw an error if audio playback is not allowed or if the acknowledgment is incorrect.
     */
    public async enable(seizureWarningAcknowledgment: string) {
        const acknowledgment = 'IKNOWITSFLASHY';
        if (seizureWarningAcknowledgment !== acknowledgment) {
            console.warn(
                `refusing to enable disco mode without seizure warning acknowledgment. Pass '${acknowledgment}' as the first argument. Enabling Disco Mode may involve flashing lights and rapidly changing visuals, which could potentially trigger seizures in individuals with photosensitive epilepsy or similar conditions. By passing the acknowledgment 'IKNOWITSFLASHY', you confirm that you understand the risks associated with enabling this feature.`
            )

            return;
        }

        console.log('disco-mode: checking DJ booth audio jacks...');
        if (!await canPlayAudio()) {
            throw new Error(
                'Disco\'s closed. Unable to playback audio. Check the site\'s permissions.'
            );
        }

        if (this.audio === null) {
            var discoTrack = await this.discoTrack;

            this.audio = new Audio(discoTrack);
        }

        console.log('disco-mode: giving DJ the signal...');
        this.audio?.play();

        // TODO: fix waiter not cleanly returning
        //await waitForAudioToStart(this.audio);

        console.log('disco-mode: giving LJ the signal...');
        this.startColorSchemeToggle();
    }

    /** 
     * Disables Disco Mode by stopping any playing music and resetting its
     * state.
     */
    public disable() {
        if (this.audio !== null) {
            console.log('disco-mode: tipping the DJ and sending him home...');
            this.audio?.pause();
            this.audio.currentTime = 0;
        }

        console.log('disco-mode: tipping the LJ and sending him home...');
        this.stopColorSchemeToggle();
    }

    /**
     * Starts rhythmically toggling the color scheme every 500ms.
     */
    private startColorSchemeToggle(): void {
        if (this.colorToggleIntervalId === null) {
            this.colorToggleIntervalId = window.setInterval(() => {
                this.preferredColorScheme.toggle();
                console.log('disco-mode: toggling color scheme...');
            }, 200);
        }
    }

    /**
     * Stops the rhythmic color scheme toggling.
     */
    private stopColorSchemeToggle(): void {
        if (this.colorToggleIntervalId !== null) {
            clearInterval(this.colorToggleIntervalId);
            this.colorToggleIntervalId = null;
        }

        console.log('disco-mode: turning the lights back on...');
        this.preferredColorScheme.toggle(ColorScheme.Dark);
    }
}


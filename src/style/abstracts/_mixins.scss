@use 'sass:math';
@use './variables' as variables;

/**
 * Retrieves the numeric weight for a given font weight.
 *
 * @param {Number|String} $weight - The font weight to map. Can be numeric 
 *                                  (e.g., 400) or textual (e.g., "Bold", 
 *                                  "Regular").
 * @return {Number} - Returns the numeric font weight (e.g., 700 for "Bold").
 */
@function map-font-weight($weight) {
    @if meta.type-of($weight) == "number" {
        @return $weight;
    }

    @return map.get(variables.$font-weights, $weight);
}

/**
 * Generates @font-face rules for a given font family, supporting multiple
 * weights, styles, and file extensions, as well as single-file or multi-file configurations.
 *
 * @param {String} $family - The name of the font-family.
 * @param {String} $src - The base source path for the font files.
 * @param {List} $weights - A list of font weights (e.g., 400, 700 or "Bold",
 *                          "Regular").
 * @param {List} $styles - A list of font styles (e.g., normal, italic)
 *                         [Default: (normal)].
 * @param {Boolean} $bundled - Whether all weights and styles are in a
 *                             single file [Default: false].
 * @param {String} $italic-postfix - The postfix for italic font styles
 *                                   [Default: "-Italic"].
 * @param {List} $extensions - A list of file extensions (e.g., 'woff', 'woff2')
 *                             [Default: ('woff', 'woff2')].
 * @output Generates @font-face rules for the specified weights, styles, and extensions.
 */
@mixin font(
    $family,
    $src,
    $weights: (100, 200, 300, 400, 500, 600, 700, 800, 900),
    $styles: (normal),
    $bundled: false,
    $italic-postfix: "-Italic",
    $extensions: ('woff2', 'woff')
) {
    @if $bundled {
        // Handle single-file fonts
        @each $style in $styles {
@font-face {
    font-display: auto;
    font-family: '#{$family}';
    font-style: $style;
    font-weight: #{list.join($weights, ", ")};

            $src-list: ();

            @each $extension in $extensions {
                $src-list: list.append(
                    $src-list,
                    url('#{$src}#{if($style == "italic", $italic-postfix, "")}.#{$extension}') format(string.unquote($extension)),
                    comma
                );
            }

    src: #{$src-list};
}

        }
    } @else {
        // Handle fonts with separate files for weights and styles
        @each $style in $styles {
            @each $weight in $weights {
@font-face {
    font-display: auto;
    font-family: '#{$family}';
    font-style: $style;
    font-weight: map-font-weight($weight);

                $src-list: ();

                @each $extension in $extensions {
                    $src-list: list.append(
                        $src-list,
                        url('#{$src}#{$weight}#{if($style == "italic", $italic-postfix, "")}.#{$extension}') format(string.unquote($extension)),
                        comma
                    );
                }

    src: #{$src-list};
}

            }
        }
    }
}

/**
 * Creates a box-shadow for an element, with an optional inset effect.
 *
 * @param {Length} $top - The vertical offset of the shadow.
 * @param {Length} $left - The horizontal offset of the shadow.
 * @param {Length} $blur - The blur radius of the shadow.
 * @param {Color} $color - The color of the shadow.
 * @param {Boolean} $inset - Whether the shadow is inset [Default: false].
 * @output Applies box-shadow styles with cross-browser compatibility.
 */
@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
    @if $inset {
-webkit-box-shadow:inset $top $left $blur $color;
-moz-box-shadow:inset $top $left $blur $color;
box-shadow:inset $top $left $blur $color;

    } @else {
-webkit-box-shadow: $top $left $blur $color;
-moz-box-shadow: $top $left $blur $color;
box-shadow: $top $left $blur $color;

    }
}

/**
 * Generates a radial gradient background with a specified shape, position,
 * and color stops.
 *
 * @param {String} $shape - The shape of the gradient (e.g., "circle",
 *                          "ellipse").
 * @param {String} $position - The position of the gradient (e.g., "center").
 *                             Can also be a key from variables.$positions.
 * @param {List} $colors - A list of color stops for the gradient.
 * @output Applies a radial gradient background using the specified parameters.
 */
@mixin radial-gradient($shape, $position, $colors) {
    $list: ();
    $shape: string.unquote($shape);
    $position: string.unquote($position);

    @for $i from 1 through list.length($colors) {
        $list: list.append($list, list.nth($colors, $i), comma);
    }

    @if map.has-key(variables.$positions, $position) {
background: radial-gradient(
    $shape map.get(variables.$positions, $position),
    $list
);

    } @else if not map.has-key(variables.$positions, $position) {
background: radial-gradient($shape $position, $list);

    }
}

/**
 * Dynamically applies styles based on the user's preferred color scheme
 * (light or dark mode), leveraging the `prefers-color-scheme` media feature.
 *
 * Light/Dark? We don't call that theming over here... It's (just) color
 * scheming. Theming is much more involved and includes overrides of the layout,
 * typography, etc.
 *
 * @param {String} $property - The CSS property to be applied (e.g., color,
 *                             background-color).
 * @param {String} $key - The key in the $colors map corresponding to the
 *                        desired color (e.g., text, background, primary).
 * @param {Boolean} $to-var - If true, treats input as a CSS variable definition
 *                            instead of a media query-wrapped style. Defaults 
                              to false.
 * @output Generates CSS rules for both light and dark color schemes using the
 *         $colors map.
 *
 * Usage:
 *
 * .button {
 *     @include scheme-color(background-color, primary);
 *     @include scheme-color(color, text);
 * }
 *
 * This will output:
 *
 * @media (prefers-color-scheme: light) {
 *     .button {
 *         background-color: <color-code>; // Light scheme
 *         color: <color-code; // Light scheme
 *     }
 * }
 *
 * @media (prefers-color-scheme: dark) {
 *     .button {
 *         background-color: #4da6ff; // Dark scheme
 *         color: #ffffff; // Dark scheme
 *     }
 * }
 *
 * Usage (as-var):
 *
 * :root {
 *     @include scheme-color(--color-background, primary, true);
 *     @include scheme-color(--color-text, text, true);
 * }
 *
 * This will output:
 *
 * :root {
 *     --color-background-primary-light: <light-color-code>;
 *     --color-background-primary-dark: <dark-color-code>;
 *     --color-background-text-light: <light-color-code>;
 *     --color-background-text-dark: <dark-color-code>;
   }
 *
 * @media (prefers-color-scheme: light) {
 *     :root {
 *         --color-background: <light-color-code>;
 *         --color-text: <light-color-code;
 *     }
 * }
 *
 * @media (prefers-color-scheme: dark) {
 *     :root {
 *         --color-background: <dark-color-code>;
 *         --color-text: <dark-color-code;
 *     }
 * }
 *
 * This mixin ensures consistency and efficiency by centralizing the logic
 * for light/dark mode color scheming, minimizing duplication and simplifying
 * maintenance.
 */
@mixin scheme-color($property, $key, $as-var: false) {
    @if $as-var {
        & {
#{$property}-light: map.get(map.get(variables.$colors, light), $key);
#{$property}-dark: map.get(map.get(variables.$colors, dark), $key);

        }
    }

@media (prefers-color-scheme: light) {
  #{$property}: map.get(map.get(variables.$colors, light), $key);
}

@media (prefers-color-scheme: dark) {
  #{$property}: map.get(map.get(variables.$colors, dark), $key);
}

}
